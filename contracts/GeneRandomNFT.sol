pragma solidity ^0.8.2;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "base64-sol/base64.sol";
contract SVGNFT is ERC721URIStorage, Ownable {
    uint256 public tokenCounter;
    // event CreatedSVGNFT(uint256 indexed tokenId, string tokenURI);
    uint256[][][] public body;
    uint256[][][] public head;
    uint256[][][] public accessory;
    uint256[][][] public glasses;
    
    string[] public colors;


    constructor() ERC721("SVG NFT", "svgNFT")
    {
        tokenCounter = 0;
    }
    function create(uint256[] memory index) public {
        _safeMint(msg.sender, tokenCounter);
        string memory imageURI = buildImage(index);
        _setTokenURI(tokenCounter, buildMetaData(imageURI));
        tokenCounter = tokenCounter + 1;
    }
    function buildImage(uint256[] memory index) view public returns (string memory) {
        // example:
        string memory baseURL = "data:image/svg+xml;base64,";
        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(createRect(index)))));
        return string(abi.encodePacked(baseURL,svgBase64Encoded));
    }

    function buildMetaData(string memory imageURI) public view returns (string memory) {
        return string(
                abi.encodePacked(
                    "data:application/json;base64,",
                    Base64.encode(
                        bytes(
                            abi.encodePacked(
                                '{"name":"',
                                "SVG NFT", // You can add whatever name here
                                '", "description":"An NFT based on SVG!", "attributes":"", "image":"',imageURI,'"}'
                            )
                        )
                    )
                )
            );
    }

    // [[14,9,21,30],[14,9,22,30],[14,9,23,30],[14,9,24,30],[2,9,25,30],[11,12,25,30],[2,9,26,30],[11,12,26,30],[2,9,27,30],[11,12,27,30],[2,9,28,30],[11,12,28,30],[2,9,29,30],[11,12,29,30],[2,9,30,30],[11,12,30,30],[2,9,31,30],[11,12,31,30]]
    // [[14,9,21,82],[14,9,22,82],[14,9,23,82],[14,9,24,82],[2,9,25,82],[11,12,25,82],[2,9,26,82],[11,12,26,82],[2,9,27,82],[11,12,27,82],[2,9,28,82],[11,12,28,82],[2,9,29,82],[11,12,29,82],[2,9,30,82],[11,12,30,82],[2,9,31,82],[11,12,31,82]]
    // [[14,9,21,120],[14,9,22,120],[14,9,23,120],[14,9,24,120],[2,9,25,120],[11,12,25,120],[2,9,26,120],[11,12,26,120],[2,9,27,120],[11,12,27,120],[2,9,28,120],[11,12,28,120],[2,9,29,120],[11,12,29,120],[2,9,30,120],[11,12,30,120],[2,9,31,120],[11,12,31,120]]
    // [[14,9,21,183],[14,9,22,183],[14,9,23,183],[14,9,24,183],[2,9,25,183],[11,12,25,183],[2,9,26,183],[11,12,26,183],[2,9,27,183],[11,12,27,183],[2,9,28,183],[11,12,28,183],[2,9,29,183],[11,12,29,183],[2,9,30,183],[11,12,30,183],[2,9,31,183],[11,12,31,183]]
    // [[14,9,21,236],[14,9,22,236],[14,9,23,236],[14,9,24,236],[2,9,25,236],[11,12,25,236],[2,9,26,236],[11,12,26,236],[2,9,27,236],[11,12,27,236],[2,9,28,236],[11,12,28,236],[2,9,29,236],[11,12,29,236],[2,9,30,236],[11,12,30,236],[2,9,31,236],[11,12,31,236]]
    
    // function addBody( uint256[][] memory _body) public returns (uint256[][] memory){
    //     body.push(_body);
    // }

    function addBodies( uint256[][][] memory _bodies) public returns (uint256[][] memory){
        body = _bodies;
    }
    // [[3,15,3,79],[1,16,4,79],[6,13,5,79],[10,11,6,79],[14,9,7,67],[10,8,8,67],[1,18,8,6],[1,19,8,67],[2,20,8,6],[2,22,8,67],[12,8,9,67],[2,20,9,6],[2,22,9,67],[18,7,10,67],[18,7,11,67],[18,7,12,67],[20,6,13,67],[20,6,14,67],[20,6,15,67],[20,6,16,79],[24,4,17,79],[5,3,18,79],[2,8,18,109],[1,10,18,79],[2,11,18,109],[1,13,18,79],[2,14,18,109],[1,16,18,79],[2,17,18,109],[1,19,18,79],[2,20,18,109],[1,22,18,79],[2,23,18,109],[4,25,18,79],[6,2,19,79],[2,8,19,109],[1,10,19,79],[2,11,19,109],[1,13,19,79],[2,14,19,109],[1,16,19,79],[2,17,19,109],[1,19,19,79],[2,20,19,109],[1,22,19,79],[2,23,19,109],[5,25,19,79],[20,6,20,79],[10,11,21,79],[1,16,2,79]]
    // [[1,16,4,156],[1,14,5,156],[1,16,5,156],[1,18,5,156],[3,15,6,156],[1,14,7,55],[3,15,7,156],[1,18,7,55],[2,8,8,156],[1,10,8,55],[3,11,8,156],[1,14,8,55],[3,15,8,156],[1,18,8,55],[3,19,8,156],[1,22,8,55],[1,23,8,156],[3,7,9,156],[1,10,9,55],[3,11,9,156],[1,14,9,55],[3,15,9,156],[1,18,9,55],[3,19,9,156],[1,22,9,55],[2,23,9,156],[4,6,10,156],[1,10,10,55],[3,11,10,156],[1,14,10,55],[3,15,10,156],[1,18,10,55],[3,19,10,156],[1,22,10,55],[3,23,10,156],[4,6,11,156],[1,10,11,55],[3,11,11,156],[1,14,11,55],[3,15,11,156],[1,18,11,55],[3,19,11,156],[1,22,11,55],[3,23,11,156],[4,6,12,156],[1,10,12,55],[3,11,12,156],[1,14,12,55],[3,15,12,156],[1,18,12,55],[3,19,12,156],[1,22,12,55],[3,23,12,156],[4,6,13,156],[1,10,13,55],[3,11,13,156],[1,14,13,55],[3,15,13,156],[1,18,13,55],[3,19,13,156],[1,22,13,55],[3,23,13,156],[4,6,14,156],[1,10,14,55],[3,11,14,156],[1,14,14,55],[3,15,14,156],[1,18,14,55],[3,19,14,156],[1,22,14,55],[3,23,14,156],[4,6,15,156],[1,10,15,55],[3,11,15,156],[1,14,15,55],[3,15,15,156],[1,18,15,55],[3,19,15,156],[1,22,15,55],[3,23,15,156],[4,6,16,156],[1,10,16,55],[3,11,16,156],[1,14,16,55],[3,15,16,156],[1,18,16,55],[3,19,16,156],[1,22,16,55],[3,23,16,156],[4,6,17,156],[1,10,17,20],[1,11,17,156],[1,12,17,],[1,13,17,156],[1,14,17,55],[3,15,17,156],[1,18,17,55],[2,19,17,156],[1,21,17,20],[1,22,17,55],[3,23,17,156],[3,7,18,156],[1,10,18,55],[2,11,18,156],[4,13,18,],[1,17,18,156],[1,18,18,55],[3,19,18,156],[1,22,18,55],[2,23,18,156],[2,8,19,156],[1,10,19,55],[3,11,19,156],[1,14,19,55],[3,15,19,156],[1,18,19,55],[3,19,19,156],[1,22,19,55],[1,23,19,156],[1,9,20,156],[1,10,20,55],[3,11,20,156],[1,14,20,55],[3,15,20,156],[1,18,20,55],[3,19,20,156],[1,22,20,55]]
    // [[4,9,2,88],[1,9,3,88],[2,10,3,98],[1,12,3,88],[4,9,4,88],[10,15,4,39],[1,8,5,97],[1,9,5,88],[1,10,5,98],[2,11,5,88],[2,13,5,97],[1,15,5,39],[8,16,5,67],[1,24,5,39],[1,25,5,97],[1,8,6,97],[4,9,6,88],[2,13,6,97],[1,15,6,39],[1,16,6,67],[6,17,6,84],[1,23,6,67],[1,24,6,39],[1,25,6,97],[1,8,7,97],[1,9,7,111],[2,10,7,98],[1,12,7,111],[2,13,7,97],[1,15,7,39],[8,16,7,67],[1,24,7,39],[1,25,7,97],[1,8,8,97],[4,9,8,111],[2,13,8,97],[1,15,8,39],[1,16,8,67],[3,17,8,84],[4,20,8,67],[1,24,8,39],[1,25,8,97],[1,8,9,97],[4,9,9,39],[2,13,9,97],[1,15,9,39],[8,16,9,67],[1,24,9,39],[1,25,9,97],[18,8,10,97],[18,8,11,97],[18,8,12,97],[18,8,13,97],[18,8,14,97],[18,8,15,97],[18,8,16,97],[15,8,17,97],[2,23,17,42],[1,25,17,97],[1,8,18,97],[2,9,18,135],[1,11,18,97],[2,12,18,135],[1,14,18,97],[2,15,18,135],[1,17,18,97],[2,18,18,135],[1,20,18,97],[4,21,18,42],[1,25,18,97],[1,8,19,97],[2,9,19,135],[1,11,19,97],[2,12,19,135],[1,14,19,97],[2,15,19,135],[1,17,19,97],[2,18,19,135],[1,20,19,97],[4,21,19,42],[1,25,19,97],[18,8,20,97]]
    // function addHead( uint256[][] memory _head) public returns (uint256[][] memory){
    //     head.push(_head);
    // }
    function addHeads( uint256[][][] memory _heads) public returns (uint256[][] memory){
        head = _heads;
    }

    // [[6,10,11,222],[6,17,11,222],[1,10,12,222],[2,11,12,1],[2,13,12,35],[1,15,12,222],[1,17,12,222],[2,18,12,1],[2,20,12,35],[1,22,12,222],[4,7,13,222 ],[2,11,13,1],[2,13,13,35],[3,15,13,222],[2,18,13,1],[2,20,13,35],[1,22,13,222],[1,7,14,222 ],[1,10,14,222],[2,11,14,1],[2,13,14,35],[1,15,14,222],[1,17,14,222],[2,18,14,1],[2,20,14,35],[1,22,14,222],[1,7,15,222 ],[1,10,15,222],[2,11,15,1],[2,13,15,35],[1,15,15,222],[1,17,15,222],[2,18,15,1],[2,20,15,35],[1,22,15,222],[6,10,16,222],[6,17,16,222]]
    // [[6,10,11,156],[6,17,11,156],[1,10,12,156],[2,11,12,1],[2,13,12,35],[1,15,12,156],[1,17,12,156],[2,18,12,1],[2,20,12,35],[1,22,12,156],[4,7,13,156 ],[2,11,13,1],[2,13,13,35],[3,15,13,156],[2,18,13,1],[2,20,13,35],[1,22,13,156],[1,7,14,156 ],[1,10,14,156],[2,11,14,1],[2,13,14,35],[1,15,14,156],[1,17,14,156],[2,18,14,1],[2,20,14,35],[1,22,14,156],[1,7,15,156 ],[1,10,15,156],[2,11,15,1],[2,13,15,35],[1,15,15,156],[1,17,15,156],[2,18,15,1],[2,20,15,35],[1,22,15,156],[6,10,16,156],[6,17,16,156]]
    // [[6,10,11,197],[6,17,11,197],[1,10,12,197],[2,11,12,1],[2,13,12,35],[1,15,12,197],[1,17,12,197],[2,18,12,1],[2,20,12,35],[1,22,12,197],[4,7,13,197 ],[2,11,13,1],[2,13,13,35],[3,15,13,197],[2,18,13,1],[2,20,13,35],[1,22,13,197],[1,7,14,197 ],[1,10,14,197],[2,11,14,1],[2,13,14,35],[1,15,14,197],[1,17,14,197],[2,18,14,1],[2,20,14,35],[1,22,14,197],[1,7,15,197 ],[1,10,15,197],[2,11,15,1],[2,13,15,35],[1,15,15,197],[1,17,15,197],[2,18,15,1],[2,20,15,35],[1,22,15,197],[6,10,16,197],[6,17,16,197]]
    // [[6,10,11,141],[6,17,11,141],[1,10,12,141],[2,11,12,1],[2,13,12,35],[1,15,12,141],[1,17,12,141],[2,18,12,1],[2,20,12,35],[1,22,12,141],[4,7,13,141 ],[2,11,13,1],[2,13,13,35],[3,15,13,141],[2,18,13,1],[2,20,13,35],[1,22,13,141],[1,7,14,141 ],[1,10,14,141],[2,11,14,1],[2,13,14,35],[1,15,14,141],[1,17,14,141],[2,18,14,1],[2,20,14,35],[1,22,14,141],[1,7,15,141 ],[1,10,15,141],[2,11,15,1],[2,13,15,35],[1,15,15,141],[1,17,15,141],[2,18,15,1],[2,20,15,35],[1,22,15,141],[6,10,16,141],[6,17,16,141]]
    // [[6,10,11,237],[6,17,11,237],[1,10,12,237],[2,11,12,1],[2,13,12,35],[1,15,12,237],[1,17,12,237],[2,18,12,1],[2,20,12,35],[1,22,12,237],[4,7,13,237 ],[2,11,13,1],[2,13,13,35],[3,15,13,237],[2,18,13,1],[2,20,13,35],[1,22,13,237],[1,7,14,237 ],[1,10,14,237],[2,11,14,1],[2,13,14,35],[1,15,14,237],[1,17,14,237],[2,18,14,1],[2,20,14,35],[1,22,14,237],[1,7,15,237 ],[1,10,15,237],[2,11,15,1],[2,13,15,35],[1,15,15,237],[1,17,15,237],[2,18,15,1],[2,20,15,35],[1,22,15,237],[6,10,16,237],[6,17,16,237]]

    // function addGlasses( uint256[][] memory _glasses) public returns (uint256[][] memory){
    //     glasses.push(_glasses);
    // }

    function addGlasseses( uint256[][][] memory _glasseses) public returns (uint256[][] memory){
        glasses = _glasseses;
    }

    // [[7,13,24,86],[1,13,25,86],[1,15,25,86],[1,17,25,86],[3,19,25,86],[3,13,26,86],[3,17,26,86],[1,21,26,86]]
    // [[7,13,23,86],[1,13,24,86],[2,15,24,86],[2,18,24,86],[2,15,25,86],[2,18,25,86],[7,13,27,29],[1,13,28,29],[2,15,28,29],[2,18,28,29],[2,15,29,29],[2,18,29,29]]
    // [[2,14,23,62],[1,17,23,62],[1,14,24,62],[2,16,24,62],[2,13,26,62],[1,16,26,62],[1,18,26,62],[2,13,27,62],[3,16,27,62],[2,14,29,62],[1,17,29,62],[1,14,30,62],[2,16,30,62]]
    // function addAccessory( uint256[][] memory _accessory) public returns (uint256[][] memory){
    //     accessory.push(_accessory);
    // }
    function addAccessories( uint256[][][] memory _accessories) public returns (uint256[][] memory){
        accessory = _accessories;
    }
    
    function addColors(string[] memory _colors) public {
        colors = _colors;
    }
    
    function createRect(uint256[] memory index) public view returns (string memory){   
        string[33] memory lookup = [
            '0', '10', '20', '30', '40', '50', '60', '70', 
            '80', '90', '100', '110', '120', '130', '140', '150',  
            '160', '170', '180', '190', '200', '210', '220', '230', 
            '240', '250', '260', '270', '280', '290', '300', '310',
            '320' 
        ];
        string memory chunk;
        
        uint256[][] memory rectBody = body[index[0]];
        uint256[][] memory rectHead = head[index[1]];
        uint256[][] memory rectAccessory = accessory[index[2]];
        uint256[][] memory rectGlasses = glasses[index[3]];
        
        uint256 cursor;
        string[16] memory buffer;
        string memory part;

        for (uint256 i = 0; i < rectBody.length; i += 1) {
            buffer[cursor] = lookup[rectBody[i][0]];          // width
            buffer[cursor + 1] = lookup[rectBody[i][1]];        // x
            buffer[cursor + 2] = lookup[rectBody[i][2]];         // y
            buffer[cursor + 3] = colors[rectBody[i][3]];   
            cursor+=4;
            if (cursor >= 16) {
                part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));
                cursor = 0;
            }
        }

        for (uint256 i = 0; i < rectHead.length; i += 1) {
            buffer[cursor] = lookup[rectHead[i][0]];          // width
            buffer[cursor + 1] = lookup[rectHead[i][1]];        // x
            buffer[cursor + 2] = lookup[rectHead[i][2]];         // y
            buffer[cursor + 3] = colors[rectHead[i][3]];   
            cursor+=4;
            if (cursor >= 16) {
                part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));
                cursor = 0;
            }
        }
        for (uint256 i = 0; i < rectAccessory.length; i += 1) {
            buffer[cursor] = lookup[rectAccessory[i][0]];          // width
            buffer[cursor + 1] = lookup[rectAccessory[i][1]];        // x
            buffer[cursor + 2] = lookup[rectAccessory[i][2]];         // y
            buffer[cursor + 3] = colors[rectAccessory[i][3]];   
            cursor+=4;
            if (cursor >= 16) {
                part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));
                cursor = 0;
            }
        }
        for (uint256 i = 0; i < rectGlasses.length; i += 1) {
            buffer[cursor] = lookup[rectGlasses[i][0]];          // width
            buffer[cursor + 1] = lookup[rectGlasses[i][1]];        // x
            buffer[cursor + 2] = lookup[rectGlasses[i][2]];         // y
            buffer[cursor + 3] = colors[rectGlasses[i][3]];   
            cursor+=4;
            if (cursor >= 16) {
                part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));
                cursor = 0;
            }
        }
        string memory background = "#d5d7e1";
        return string(
            abi.encodePacked(
                '<svg width="320" height="320" viewBox="0 0 320 320" xmlns="http://www.w3.org/2000/svg" shape-rendering="crispEdges">',
                '<rect width="100%" height="100%" fill="', background, '" />',
                part, 
                '</svg>'
            )
            );
    }

   function _getChunk(uint256 cursor, string[16] memory buffer) private pure returns (string memory) {
        string memory chunk;
        for (uint256 i = 0; i < cursor; i += 4) {
            chunk = string(
                abi.encodePacked(
                    chunk,
                    '<rect width="', buffer[i], '" height="10" x="', buffer[i + 1], '" y="', buffer[i + 2], '" fill="#', buffer[i + 3], '" />'
                )
            );
        }
        return chunk;
    }
}